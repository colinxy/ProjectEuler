"""
count

| a10 |     |  1  1  1  1  1  1  1  1  1 |   | a9 |
| a9  |     |  1  0  0  0  0  0  0  0  0 |   | a8 |
| a8  |     |  0  1  0  0  0  0  0  0  0 |   | a7 |
| a7  |     |  0  0  1  0  0  0  0  0  0 |   | a6 |
| a6  |  =  |  0  0  0  1  0  0  0  0  0 | * | a5 |
| a5  |     |  0  0  0  0  1  0  0  0  0 |   | a4 |
| a4  |     |  0  0  0  0  0  1  0  0  0 |   | a3 |
| a3  |     |  0  0  0  0  0  0  1  0  0 |   | a2 |
| a2  |     |  0  0  0  0  0  0  0  1  0 |   | a1 |

sum

| s10 |     | 10 10 10 10 10 10 10 10 10 |   | s9 |
| s9  |     |  1  0  0  0  0  0  0  0  0 |   | s8 |
| s8  |     |  0  1  0  0  0  0  0  0  0 |   | s7 |
| s7  |     |  0  0  1  0  0  0  0  0  0 |   | s6 |
| s6  |  =  |  0  0  0  1  0  0  0  0  0 | * | s5 |  +
| s5  |     |  0  0  0  0  1  0  0  0  0 |   | s4 |
| s4  |     |  0  0  0  0  0  1  0  0  0 |   | s3 |
| s3  |     |  0  0  0  0  0  0  1  0  0 |   | s2 |
| s2  |     |  0  0  0  0  0  0  0  1  0 |   | s1 |

            |  1  2  3  4  5  6  7  8  9 |   | a9 |
            |  0  0  0  0  0  0  0  0  0 |   | a8 |
            |  0  0  0  0  0  0  0  0  0 |   | a7 |
            |  0  0  0  0  0  0  0  0  0 |   | a6 |
            |  0  0  0  0  0  0  0  0  0 | * | a5 |
            |  0  0  0  0  0  0  0  0  0 |   | a4 |
            |  0  0  0  0  0  0  0  0  0 |   | a3 |
            |  0  0  0  0  0  0  0  0  0 |   | a2 |
            |  0  0  0  0  0  0  0  0  0 |   | a1 |


combined

| s10 |     | 10 10 10 10 10 10 10 10 10  1  2  3  4  5  6  7  8  9 |   | s9 |
| s9  |     |  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 |   | s8 |
| s8  |     |  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 |   | s7 |
| s7  |     |  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 |   | s6 |
| s6  |  =  |  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0 |   | s5 |
| s5  |     |  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 |   | s4 |
| s4  |     |  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0 |   | s3 |
| s3  |     |  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0 |   | s2 |
| s2  |     |  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0 | * | s1 |
| a10 |     |  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1 |   | a9 |
| a9  |     |  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0 |   | a8 |
| a8  |     |  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0 |   | a7 |
| a7  |     |  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0 |   | a6 |
| a6  |  =  |  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0 |   | a5 |
| a5  |     |  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0 |   | a4 |
| a4  |     |  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0 |   | a3 |
| a3  |     |  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0 |   | a2 |
| a2  |     |  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 |   | a1 |
"""

from functools import lru_cache
import numpy as np

MOD = 10 ** 9


@lru_cache()
def partition(n):
    if n == 0:
        return 1
    return sum(partition(n-i) for i in range(1, min(9, n)+1))


@lru_cache()
def partition_sum(n):
    if n == 0:
        return 0
    return sum(i * partition(n-i) + 10 * partition_sum(n-i)
               for i in range(1, min(9, n)+1))


vec = np.array([partition_sum(i) for i in range(9, 0, -1)] +
               [partition(i) for i in range(9, 0, -1)],
               dtype=np.int64)
mat = np.array([
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   1,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  1,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  1,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  1,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  1,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  1,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  1,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0,   0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
], dtype=np.int64)


def mat_power(mat, n):
    exp = n
    base = mat
    result = np.eye(mat.shape[0], dtype=np.int64)
    while exp:
        if exp & 1:
            result = np.dot(base, result) % MOD
        exp >>= 1
        base = np.dot(base, base) % MOD

    return result


def f(n):
    if n <= 9:
        return partition_sum(n)

    # mat^(n-9) * vec
    return np.dot(mat_power(mat, n-9), vec % MOD)[0]


def main():
    print(sum(f(13**i) for i in range(1, 18)) % MOD)


if __name__ == '__main__':
    main()
