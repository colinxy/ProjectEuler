from itertools import combinations


def is_square(x):
    return int(x ** 0.5) ** 2 == x


def primitive_pythagorean_triple_generator(max_c, a=3, b=4, c=5):
    branch1 = lambda x, y, z: (x - 2 * y + 2 * z, 2 * x - y + 2 * z, 2 * x - 2 * y + 3 * z)
    branch2 = lambda x, y, z: (-x + 2 * y + 2 * z, -2 * x + y + 2 * z, -2 * x + 2 * y + 3 * z)
    branch3 = lambda x, y, z: (x + 2 * y + 2 * z, 2 * x + y + 2 * z, 2 * x + 2 * y + 3 * z)

    a1, b1, c1 = branch1(a, b, c)
    if c1 <= max_c:
        primitive_triples.append((a1, b1, c1))
        primitive_pythagorean_triple_generator(max_c, a1, b1, c1)

    a2, b2, c2 = branch2(a, b, c)
    if c2 <= max_c:
        primitive_triples.append((a2, b2, c2))
        primitive_pythagorean_triple_generator(max_c, a2, b2, c2)

    a3, b3, c3 = branch3(a, b, c)
    if c3 <= max_c:
        primitive_triples.append((a3, b3, c3))
        primitive_pythagorean_triple_generator(max_c, a3, b3, c3)

primitive_triples = [(3, 4, 5)]

"""
x+y y+z x+z
 a   b   c

 d   e   f
x-y y-z x-z

c + e = a   d + b = c
b + f = a   d + e = f
"""


def main():
    N = 10 ** 7
    sqrt_N = int(N ** 0.5)
    primitive_pythagorean_triple_generator(sqrt_N)
    triples = [[] for _ in range(sqrt_N+1)]
    for pri_triple in primitive_triples:
        for multiple in range(1, sqrt_N // pri_triple[2] + 1):
            triples[multiple * pri_triple[2]].append(tuple(i*multiple for i in pri_triple))
    # for index, item in enumerate(triples):
    #     if item:
    #         print(index, item)
    # print("pythagorean generated by", time() - starting_time)

    for a_sqrt in range(1, sqrt_N+1):
        if len(triples[a_sqrt]) >= 2:
            for triple1, triple2 in combinations(triples[a_sqrt], 2):
                if max(triple1[:2]) > max(triple2[:2]):
                    triple_bigger, triple_smaller = triple1, triple2
                else:
                    triple_bigger, triple_smaller = triple2, triple1

                c_sqrt, e_sqrt = max(triple_bigger[:2]), min(triple_bigger[:2])
                if not triples[c_sqrt]:
                    continue
                if not (e_sqrt < triple_smaller[0] < c_sqrt and e_sqrt < triple_smaller[1] < c_sqrt):
                    continue
                b_sqrt, f_sqrt = max(triple_smaller[:2]), min(triple_smaller[:2])
                if not triples[f_sqrt]:
                    b_sqrt, f_sqrt = min(triple_smaller[:2]), max(triple_smaller[:2])
                a, b, c, e, f = a_sqrt**2, b_sqrt**2, c_sqrt**2, e_sqrt**2, f_sqrt**2
                d = c - b
                if d != f - e or (not is_square(d)):
                    continue
                # print(a, b, c, d, e, f)
                x = (a+d)//2
                if x*2 != a+d:
                    continue
                y = (b+e)//2
                if y*2 != b+e:
                    continue
                z = (c-f)//2
                if z*2 != c-f:
                    continue
                print(x, y, z)
                print(x + y + z)
                # print(is_square(x+y), is_square(y+z), is_square(x+z), is_square(x-y), is_square(y-z), is_square(x-z))
                return


if __name__ == '__main__':
    from time import time
    starting_time = time()
    main()
    print("Time elapsed:", time() - starting_time, "seconds")
